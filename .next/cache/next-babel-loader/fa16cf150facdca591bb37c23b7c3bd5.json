{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/blake/Desktop/MVP/Popcorn_next/pages/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-forms';\nimport axios from 'axios';\nexport default function Login() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors; // initialize the hook\n\n\n  var _useState = useState(false),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var onSubmit = function onSubmit(data) {\n    // eslint-disable-next-line no-param-reassign\n    data.password = stringHash(\"\".concat(data.password + pepper + data.userName));\n    axios.post('/check', data).then(function () {\n      return props.setUser(data.userName);\n    })[\"catch\"](function () {\n      return setError(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userNameInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"userNameInput\",\n          name: \"userName\",\n          ref: register({\n            required: true\n          }),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this), errors ? /*#__PURE__*/_jsxDEV(Err, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"slot\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"passwordInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"passwordInput\",\n          name: \"password\",\n          ref: register,\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), errors.password && 'Password is required.']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \"New User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"Ccm2hGkZ9YYC26s0LGEleHJY0TU=\", false, function () {\n  return [useForm];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/blake/Desktop/MVP/Popcorn_next/pages/index.js"],"names":["React","useState","useForm","axios","Login","register","handleSubmit","errors","error","setError","onSubmit","data","password","stringHash","pepper","userName","post","then","props","setUser","required"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAAA,iBACaF,OAAO,EADpB;AAAA,MACtBG,QADsB,YACtBA,QADsB;AAAA,MACZC,YADY,YACZA,YADY;AAAA,MACEC,MADF,YACEA,MADF,EACwB;;;AADxB,kBAEJN,QAAQ,CAAC,KAAD,CAFJ;AAAA,MAEvBO,KAFuB;AAAA,MAEhBC,QAFgB;;AAG9B,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzB;AACAA,IAAAA,IAAI,CAACC,QAAL,GAAgBC,UAAU,WAAIF,IAAI,CAACC,QAAL,GAAgBE,MAAhB,GAAyBH,IAAI,CAACI,QAAlC,EAA1B;AACAZ,IAAAA,KAAK,CACFa,IADH,CACQ,QADR,EACkBL,IADlB,EAEGM,IAFH,CAEQ;AAAA,aAAMC,KAAK,CAACC,OAAN,CAAcR,IAAI,CAACI,QAAnB,CAAN;AAAA,KAFR,WAGS;AAAA,aAAMN,QAAQ,CAAC,IAAD,CAAd;AAAA,KAHT;AAID,GAPD;;AASA,sBACE;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEH,YAAY,CAACI,QAAD,CAA5B;AAAA,8BACA;AAAO,QAAA,OAAO,EAAC,eAAf;AAAA,gCACE;AACE,UAAA,EAAE,EAAC,eADL;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,GAAG,EAAEL,QAAQ,CAAC;AAAEe,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAHf;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBADF,EAOGb,MAAM,gBAAG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAa;AAAA;AAAA;AAAA;AAAA,gBAPtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAUA;AAAA;AAAA;AAAA;AAAA,cAVA,eAWA;AAAO,QAAA,OAAO,EAAC,eAAf;AAAA,gCACE;AACE,UAAA,EAAE,EAAC,eADL;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,GAAG,EAAEF,QAHP;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBADF,EAOGE,MAAM,CAACK,QAAP,IAAmB,uBAPtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAXA,eAoBA;AAAA;AAAA;AAAA;AAAA,cApBA,eAqBA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBA,eAsBA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GAxCuBR,K;UACqBF,O;;;KADrBE,K","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-forms';\nimport axios from 'axios';\n\nexport default function Login() {\n  const { register, handleSubmit, errors } = useForm(); // initialize the hook\n  const [error, setError] = useState(false);\n  const onSubmit = (data) => {\n    // eslint-disable-next-line no-param-reassign\n    data.password = stringHash(`${data.password + pepper + data.userName}`);\n    axios\n      .post('/check', data)\n      .then(() => props.setUser(data.userName))\n      .catch(() => setError(true));\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"userNameInput\">\n        <input\n          id=\"userNameInput\"\n          name=\"userName\"\n          ref={register({ required: true })}\n          type=\"text\"\n        />\n        {errors ? <Err /> : <slot />}\n      </label>\n      <br />\n      <label htmlFor=\"passwordInput\">\n        <input\n          id=\"passwordInput\"\n          name=\"password\"\n          ref={register}\n          type=\"password\"\n        />\n        {errors.password && 'Password is required.'}\n      </label>\n      <br />\n      <button type=\"button\">New User</button>\n      <button type=\"submit\">Submit</button>\n    </form>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}